services:
  sql:
    image: pgmp-postgres
    build: ./
    expose:
      - "5432"
    restart: always
    environment:
      POSTGRES_DB: openchronology
      POSTGRES_USER: postgres # needed for the prune-old-sesisons.sh script
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    networks:
      - protected

  sql-rest:
    image: postgrest/postgrest:latest
    depends_on:
      - sql
    ports:
      - ${PGRST_SERVER_PORT}:${PGRST_SERVER_PORT}
    restart: always
    environment:
      PGRST_SERVER_PORT: ${PGRST_SERVER_PORT}
      PGRST_DB_URI: "postgres://authenticator_user:${PGRST_AUTHENTICATOR_PW}@sql:5432/openchronology"
      PGRST_DB_ANON_ROLE: guest_group
      PGRST_DB_SCHEMAS: api
      PGRST_DB_MAX_ROWS: 10000
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
      PGRST_JWT_AUD: ${PGRST_JWT_AUD}
      PGRST_JWT_ROLE_CLAIM_KEY: ".\"${PGRST_JWT_AUD}/role\""
    networks:
      - protected

  sql-cron:
    image: ubuntu:22.04
    depends_on:
      - sql-rest
    restart: always
    volumes:
      - ./cron-runner/target/debug/cron-runner:/opt/cron-runner
    environment:
      RUST_LOG: cron_runner
      PGRST_SERVER_PORT: ${PGRST_SERVER_PORT}
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
      PGRST_JWT_AUD: ${PGRST_JWT_AUD}
      PGRST_HOST: sql-rest
    command: /opt/cron-runner
    networks:
      - protected

  sql-filter:
    image: ubuntu:22.04
    depends_on:
      - sql-rest
    restart: always
    # expose:
    #   - ${FILTER_PORT}
    ports:
      - ${FILTER_PORT}:${FILTER_PORT}
    volumes:
      - ./filter/target/debug/filter:/opt/filter
    environment:
      PGRST_SERVER_PORT: ${PGRST_SERVER_PORT}
      PGRST_HOST: sql-rest
      FILTER_PORT: ${FILTER_PORT}
      VIRTUAL_PORT: ${FILTER_PORT}
      VIRTUAL_HOST: "sql-filter"
    command: /opt/filter
    networks:
      - protected
      - public

  proxy:
    image: nginxproxy/nginx-proxy
    ports:
      - 80:80
    depends_on:
      - sql-filter
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - public

networks:
  protected:
  public:
    driver: bridge
